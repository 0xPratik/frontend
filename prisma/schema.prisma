// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]

}

// datasource db {
//   provider             = "mysql"
//   url                  = env("DATABASE_URL")
//   referentialIntegrity = "prisma"
// }

datasource db {
  provider             = "sqlite"
  url                  = "file:./dev.db"
  referentialIntegrity = "prisma"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String?   @unique
  name          String
  image         String?
  emailVerified DateTime?
  address       Address?
  payments      Payment[]
  orders        Order[]
  Account       Account[]
  Session       Session[]
}

model Address {
  id          Int    @id @default(autoincrement())
  city        String
  country     String
  postal_code Int
  suite       String
  phone_no    String
  user        User   @relation(fields: [userId], references: [id])
  userId      Int    @unique

  @@index([userId])
}

model Product {
  id       Int        @id @default(autoincrement())
  title    String
  desc     String
  price    Int
  image    String
  Order    Order?     @relation(fields: [orderId], references: [id])
  orderId  Int?
  category Category[]

  @@index([orderId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  @@index([productId])
}

model Order {
  id        Int       @id @default(autoincrement())
  orderDate DateTime
  products  Product[]
  payment   Payment?
  User      User?     @relation(fields: [userId], references: [id])
  userId    Int?

  @@index([userId])
}

model Payment {
  id      Int    @id @default(autoincrement())
  amount  Int
  txSig   String
  order   Order  @relation(fields: [orderId], references: [id])
  orderId Int    @unique
  User    User?  @relation(fields: [userId], references: [id])
  userId  Int?

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
