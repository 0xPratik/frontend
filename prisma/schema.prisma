// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// datasource db {
//   provider             = "mysql"
//   url                  = env("DATABASE_URL")
//   referentialIntegrity = "prisma"
// }

datasource db {
  provider             = "sqlite"
  url                  = "file:./dev.db"
  referentialIntegrity = "prisma"
}

model Purchaser {
  id        String    @id @default(cuid())
  pubkey    String    @unique @default("9iSD3wkC1aq3FcwgjJfEua9FkkZJWv7Cuxs6sKjc3VnR")
  address   Address?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  payments  Payment[]
  orders    Order[]
  Cart      Cart?
}

model Address {
  id          String    @id @default(cuid())
  city        String
  country     String
  postal_code Int
  suite       String
  phone_no    String
  user        Purchaser @relation(fields: [userId], references: [id])
  userId      String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@index([userId])
}

model TokenGated {
  id       String    @id @default(cuid())
  token    String    @unique
  discount Int
  uses     Int
  Product  Product[]
}

model Product {
  id             String      @id @unique @default(cuid())
  title          String
  desc           String
  price          Float
  image          String
  totalInventory Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now()) @updatedAt
  Order          Order?      @relation(fields: [orderId], references: [id])
  orderId        String?
  category       Category?   @relation(fields: [categoryId], references: [id])
  categoryId     String?
  isGated        TokenGated? @relation(fields: [tokenGatedId], references: [id])
  tokenGatedId   String?
  Cart           Cart?       @relation(fields: [cartId], references: [id])
  cartId         String?

  @@index([orderId])
}

model Cart {
  id        String    @id @default(cuid())
  user      Purchaser @relation(fields: [userId], references: [id])
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Product   Product[]
}

model Category {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Product   Product[]
}

model Order {
  id        String     @id @default(cuid())
  products  Product[]
  payment   Payment?
  User      Purchaser? @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt

  @@index([userId])
}

model Payment {
  id        String     @id @default(cuid())
  amount    Int
  txSig     String
  order     Order      @relation(fields: [orderId], references: [id])
  orderId   String     @unique
  User      Purchaser? @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
